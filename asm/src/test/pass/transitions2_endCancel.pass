Process Transitions2_EndCancel {
    Data {
        "agents" -> {
            "A" -> {"foo"},
            "B" -> {"bar", "baz"}
        }
    }

    Subject A {
        StartSubject := true

        Macro Main {
            START: "VarMan" ("storeData", "pingContent", "Ping!") -> Create1

            Create1: "SelectAgents" ("b1", "B", 1, 1) -> Create2
            Create2: "SelectAgents" ("b2", "B", 1, 1) -> Merge

            Merge: "VarMan" ("concatenation", "b1", "b2", "b") -> Send1

            Send1: Send ["block" to B in "b1" with content of "pingContent"] -> Call1

            Call1: "CallMacro" ("TrySendBlock") {
                "ok" -> Call2
                "failed" -> END_Fail1
            }

            Call2: "CallMacro" ("TrySendBlock") {
                "ok" -> END_Fail2
                "failed" -> Send3
            }


            Send3: Send {
                ["block" to B in "b2" with content of "pingContent"] -> Clear1
                (timeout (5)) -> END_Fail3
            }

            Clear1: Send ["clearBlock" to B in "b1" with content of "pingContent"] -> Clear2

            Clear2: Send ["clearBlock" to 2 of B in "b" with content of "pingContent"] -> Clear3

            Clear3: Send ["end" to 2 of B in "b" with content of "pingContent"] -> END

            END_Fail1: End ("first TrySendBlock should have succeeded as there is at most one message in the IPs")
            END_Fail2: End ("second TrySendBlock should have failed as the first subject has already two messages in the IP")
            END_Fail3: End ("a leaked reservation message must be left in the IP, as the second subject should have only one message in its IP")
        }

        Macro TrySendBlock {
            START: "ModalSplit" {
                -> Send
                -> Guard
            }

            Send "TrySendBlock: Send": Send {
                ["block" to 2 of B in "b" with content of "pingContent"] -> END_ok
            }
            Guard "TrySendBlock: Guard Send timeout": InternalAction {
                (timeout (5)) -> END_fail
            }

            END_ok:   End ("ok")
            END_fail: End ("failed")
        }
    }

    Subject B {
        InputPool := 2

        Macro Main {
            START: Receive {
                ["clearBlock" from A] (auto with priority 1) -> Clear
                ["end" from A] (auto) -> END
            }

            Clear: Receive {
                ["block" from A] (auto) -> START
            }
        }
    }
}
