Process Transitions2_CancelMacro {
    Data {
        "agents" -> {
            "A" -> {"foo"},
            "B" -> {"bar"}
        }
    }

    Subject A {
        StartSubject := true

        Macro Main {
            START: "ModalSplit" {
                -> call1
                -> wait1
            }

            call1: "CallMacro" ("Foo") {
                -> TERMINATE_Fail1
                (cancel) -> call2
            }

            call2: "CallMacro" ("Foo") {
                -> TERMINATE_Fail1
                (cancel) -> join
            }

            // give CallMacro a chance to run
            wait1: InternalAction {
                (timeout (1)) -> "cancel1"
            }
            "cancel1": "Cancel" {
                "call1" (auto) -> wait2
                (timeout (2))  -> TERMINATE_Fail2
            }

            // give CallMacro a chance to run
            wait2: InternalAction {
                (timeout (1)) -> "cancel2"
            }
            "cancel2": "Cancel" {
                "call2" (auto) -> join
                (timeout (2))  -> TERMINATE_Fail2
            }

            join: "ModalJoin" -> TERMINATE

            TERMINATE_Fail1: Terminate ("call was not deactivated")
            TERMINATE_Fail2: Terminate ("cancel timed out")
        }

        Macro Foo {
            LocalVariables := {"msgContent"}

            START: "VarMan" ("storeData", "msgContent", "failed") -> wait

            // give Cancel a chance to run
            wait: InternalAction {
                (timeout (5)) -> Send_Fail
                (cancel)      -> Send_Fail
            }
            Send_Fail: Send {
                ["fail" to B with content of "msgContent"] -> TERMINATE
            }
        }
    }

    Subject B {
        Macro Main {
            START: Receive {
                ["fail" from A] (auto) -> TERMINATE_Fail
            }
            TERMINATE_Fail: Terminate ("received failure message")
        }
    }
}
